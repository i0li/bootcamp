【ログ】
-----------------------------
開始時間　取り組んだ内容
終了時間　〈予定時間　→　実績時間〉
-----------------------------
2:55 （修正）全体提出したものの修正。インデントの見直しやスペースを適切に設ける
3:30　〈50　→　35〉

3:30　module とは何か、どのような用途で使われるかを調べ、その利用例をコードする
4:10　〈30　→　40〉

4:10　include / extend / prepend の違いを調べ、利用例をコードする
4:40　〈40 → 30〉

4:40　例外 とは何かを調べ、まとめる（例外を補足する or しない の判断軸も調べてみましょう）
5:40　〈40　→　60〉

5:40　例外オブジェクト とは何かを調べ、その利用例をコードする
6:00　〈40　→ 20〉

6:00　意図的に例外を発生させる方法を調べ、その利用例をコードする
6:20　〈30　→　20〉

6:20　よく発生する例外クラスを調べ、まとめる
6:50　〈30　→　30〉



9:10　独自の例外クラスを定義し、その利用例をコードする
9:25　〈30　→　15〉

9:25　ファイルやディレクトリを扱うクラス について調べ、その利用例をコードする
10:05〈30　→　40〉



12:00　オブジェクト指向プログラミング（Object Oriented Programming: OOP）について調べ、まとめる
12:50　〈40　→　50〉

12:50　クラス、インスタンス変数、メソッドの関係を調べ、まとめる
13:05　〈50　→　15〉

13:05　"身の回りのモノをクラスとして表現し、コードする
       その際に複数のクラスを作成し関連づける
      （継承やmoduleは使わない / 生物ではないモノにする）"
14:35　〈60 → 90〉

14:35　ログのメモ記入
14:50　〈30　→ 15〉

予定時間合計 8時間20分
実績時間合計 7時間40分

【メモ】
● module
処理のみを一まとめにしたもの。一まとめにすることによりクラスが見やすくなる

● include / extend / prepend
include : moduleをインスタンスメソッド（インスタンスそれぞれに作用）として呼び出す 
extend :  moduleをクラスメソッド（クラス全体で共有する変数に作用）として呼び出す
prepend : クラス内のモジュール内に同じメソッド名のものがあった場合モジュールの方を優先して呼び出す

● 例外
プログラム動作時に発生したエラー（存在しないメソッドが呼び出されたなど）

● 例外オブジェクト
発生したエラーのクラスやメッセージの情報が格納されている

● 意図的に例外発生
Raiseを使って意図的に例外を発生させることができる

● よく発生する例外クラス
例外クラスの内自分がよく出くわすのは「SyntaxError」

● 独自の例外クラス
独自の例外クラスを作成する場合はStandardErrorクラスを継承してmessegeなどをsuperを使って上書きする

●　ファイルやディレクトリを扱うクラス
ファイルを扱うクラスはFileクラス
ディレクトリを扱うクラスはDirクラス
それぞれファイルの読み書き、ディレクトリの作成、削除などができる

●オブジェクト指向プログラミング
単に上から順にソースコードを実行するだけではなく、「モノ」を作成してそれに対して処理を作用させることを意識する

●クラス、インスタンス変数、メソッド
クラスはオブジェクトの設計書
インスタンス変数は実物を作る上で必要なもの
メソッドは、ものに付与させたい機能



【感想】
初めて例外処理について勉強したため、どういったケースでこの処理が必要なのかについて理解するのが難しかった。
また実際に自分でクラスを設計してみて、全くもって完璧ではないが、これまでの学習してきたことをこれまでよりも理解することができた。
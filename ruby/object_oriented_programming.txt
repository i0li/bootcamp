オブジェクト指向プログラミングについて

=== プログラムをどう表現するか、代表的な方法 ===
● オブジェクト指向プログラミング
  「モノ」を組み立てるように表現し、コンピュータに動作をさせる
● 手続き型プログラミング
  上から下に単調なルールで文章を読むように動作する
● 関数型プログラミング
  数学の関数のイメージでデータに何かしらの処理をして答えを取得するように動作する

=== オブジェクト指向プログラミングで出てくる言葉 ===
【オブジェクト】
「モノ」「対象」データと処理の集まり
例）車の形をした鉄の塊　＋　前に進む機能　左右に曲がる機能　バックする機能　
  　→　自動車（物体と機能が一つになったオブジェクト） 

【クラス】
データと処理を一つにまとめたもの。オブジェクトの設計書のようなもの。
例）車の設計書 → 設計書内のカラーを赤として車を生産する → 赤色の車
 　　　　　　　→ 設計書内のカラーを青として車を生産する → 青色の車

【プロパティ】
オブジェクトが持っているデータのこと。
例）「メーカー」や「排気量」「色」など
 
【メソッド】
オブジェクトが持っている処理のこと
例）車であれば「前にすすむ機能」「左右に曲がる機能」など
 
=== オブジェクト指向の三原則 ===
【継承】
同じようなプログラムを一箇所にまとめてコードを再利用しやすくする仕組み
例）大型トラッククラスを作成しようとした時に、あらかじめ車の基本的なプログラムをまとめた
車クラスを作っておいて、それを継承して必要な部分（コンテナを運べるようにする機能など）を
コードすることで、手間もミスも省ける。

【カプセル化】
他のプログラムからできるだけ変更できないようにする仕組み
privateやprotectedなどを使って、外部からのアクセスを制限することで
プログラムの破損を防ぐことができる
例）ゲーム内でキャラクターのレベルを直接変更できてしまってはゲームバランスが崩れてしまうため
直接アクセスできないようにして、経験値の量のみレベルに影響するようにするなど

【ポリモーフィズム】
単一の指示でクラス（オブジェクト）ごとに異なる振る舞いをさせる
これより統一感が出てコードが綺麗になり、変更に強くなる
例）「綺麗にせよ」→ トイレ掃除担当の人　→ トイレを清掃する
               → 教室掃除担当の人　　→ 教室を清掃する
「綺麗にせよ」という指示は同じだが振る舞いが違う